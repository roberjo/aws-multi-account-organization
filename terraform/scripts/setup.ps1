# AWS Multi-Account Organization Setup Script
# Phase 1: Foundation Setup

param(
    [string]$Region = "us-east-1",
    [string]$OrganizationName = "Enterprise Organization",
    [string]$ManagementAccountEmail = "admin@company.com",
    [switch]$SkipPrerequisites = $false
)

Write-Host "üè¢ AWS Multi-Account Organization Setup" -ForegroundColor Cyan
Write-Host "Phase 1: Foundation Setup" -ForegroundColor Yellow
Write-Host ""

# Check prerequisites
if (-not $SkipPrerequisites) {
    Write-Host "üìã Checking Prerequisites..." -ForegroundColor Green
    
    # Check AWS CLI
    try {
        $awsVersion = aws --version 2>$null
        Write-Host "‚úÖ AWS CLI: $awsVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå AWS CLI not found. Please install AWS CLI v2.0+" -ForegroundColor Red
        exit 1
    }
    
    # Check Terraform
    try {
        $terraformVersion = terraform version -json | ConvertFrom-Json
        if ([version]$terraformVersion.terraform_version -lt [version]"1.5.0") {
            Write-Host "‚ùå Terraform version $($terraformVersion.terraform_version) is too old. Please upgrade to 1.5+" -ForegroundColor Red
            exit 1
        }
        Write-Host "‚úÖ Terraform: v$($terraformVersion.terraform_version)" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Terraform not found. Please install Terraform v1.5+" -ForegroundColor Red
        exit 1
    }
    
    # Check AWS credentials
    try {
        $identity = aws sts get-caller-identity --output json | ConvertFrom-Json
        Write-Host "‚úÖ AWS Account: $($identity.Account)" -ForegroundColor Green
        Write-Host "‚úÖ AWS User: $($identity.Arn)" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå AWS credentials not configured. Run 'aws configure'" -ForegroundColor Red
        exit 1
    }
    
    # Check MFA
    try {
        $mfaDevices = aws iam list-mfa-devices --output json | ConvertFrom-Json
        if ($mfaDevices.MFADevices.Count -eq 0) {
            Write-Host "‚ö†Ô∏è  Warning: No MFA devices found. MFA is recommended for security" -ForegroundColor Yellow
        } else {
            Write-Host "‚úÖ MFA devices configured: $($mfaDevices.MFADevices.Count)" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  Could not check MFA status" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üèóÔ∏è  Setting up Terraform Backend..." -ForegroundColor Green

# Generate unique suffix for S3 bucket
$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$bucketName = "terraform-state-organization-$timestamp"

# Create S3 bucket for Terraform state
Write-Host "Creating S3 bucket: $bucketName"
try {
    aws s3 mb s3://$bucketName --region $Region
    
    # Enable versioning
    aws s3api put-bucket-versioning --bucket $bucketName --versioning-configuration Status=Enabled
    
    # Enable encryption
    $encryptionConfig = @{
        Rules = @(
            @{
                ApplyServerSideEncryptionByDefault = @{
                    SSEAlgorithm = "AES256"
                }
            }
        )
    } | ConvertTo-Json -Depth 10
    
    $encryptionConfig | Out-File -FilePath temp-encryption.json -Encoding UTF8
    aws s3api put-bucket-encryption --bucket $bucketName --server-side-encryption-configuration file://temp-encryption.json
    Remove-Item temp-encryption.json
    
    # Block public access
    aws s3api put-public-access-block --bucket $bucketName --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    
    Write-Host "‚úÖ S3 bucket created and configured" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Failed to create S3 bucket: $_" -ForegroundColor Red
    exit 1
}

# Create DynamoDB table for state locking
Write-Host "Creating DynamoDB table for state locking..."
try {
    aws dynamodb create-table --table-name terraform-state-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --region $Region
    
    # Wait for table to be active
    Write-Host "Waiting for DynamoDB table to be active..."
    aws dynamodb wait table-exists --table-name terraform-state-lock --region $Region
    
    Write-Host "‚úÖ DynamoDB table created" -ForegroundColor Green
}
catch {
    if ($_.Exception.Message -like "*ResourceInUseException*") {
        Write-Host "‚úÖ DynamoDB table already exists" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Failed to create DynamoDB table: $_" -ForegroundColor Red
        exit 1
    }
}

# Create backend configuration
Write-Host ""
Write-Host "üìù Creating backend configuration..." -ForegroundColor Green

$backendConfig = @"
# This file is auto-generated by setup.ps1
# Do not edit manually

terraform {
  backend "s3" {
    bucket         = "$bucketName"
    key            = "management/terraform.tfstate"
    region         = "$Region"
    dynamodb_table = "terraform-state-lock"
    encrypt        = true
  }
}
"@

$backendConfig | Out-File -FilePath "environments/management/backend.tf" -Encoding UTF8

# Create terraform.tfvars
$tfvarsContent = @"
# Auto-generated by setup.ps1
# Customize these values as needed

region                     = "$Region"
organization_name         = "$OrganizationName"
management_account_email  = "$ManagementAccountEmail"

# Organizational Units
organizational_units = {
  security = {
    name        = "Security OU"
    description = "Security and compliance accounts"
  }
  infrastructure = {
    name        = "Infrastructure OU"
    description = "Shared services and infrastructure"
  }
  application = {
    name        = "Application OU"
    description = "Application workloads"
  }
  sandbox = {
    name        = "Sandbox OU"
    description = "Development and testing"
  }
}

# Tags applied to all resources
default_tags = {
  Environment = "Management"
  Owner       = "DevOps"
  Project     = "AWS Organization"
  Phase       = "1-Foundation"
}
"@

$tfvarsContent | Out-File -FilePath "environments/management/terraform.tfvars" -Encoding UTF8

Write-Host "‚úÖ Backend configuration created" -ForegroundColor Green
Write-Host "‚úÖ Terraform variables file created" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Setup Complete!" -ForegroundColor Green
Write-Host ""
Write-Host "Next steps:" -ForegroundColor Yellow
Write-Host "1. Review and customize terraform.tfvars in environments/management/" -ForegroundColor White
Write-Host "2. Run: Set-Location environments\management" -ForegroundColor White  
Write-Host "3. Run: terraform init" -ForegroundColor White
Write-Host "4. Run: terraform plan" -ForegroundColor White
Write-Host "5. Run: terraform apply" -ForegroundColor White
Write-Host ""
Write-Host "S3 Bucket: $bucketName" -ForegroundColor Cyan
Write-Host "DynamoDB Table: terraform-state-lock" -ForegroundColor Cyan
Write-Host "Region: $Region" -ForegroundColor Cyan
